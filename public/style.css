<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Walmart ‚Äî AI experience ‚Ä¢ VoxTalk‚Ñ¢</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <header class="navbar">
    <h1 class="brand">
      <span class="brand-main">Walmart</span><span class="brand-icon">‚ú≥</span>
    </h1>
    <p class="ai-powered">A comfortable AI experience ‚Äî powered by VoxTalk‚Ñ¢</p>
  </header>

  <main class="container">
    <!-- One-line action row; data-target ensures reliable switching -->
    <div class="portal-row" role="group" aria-label="Primary actions">
      <button id="cartBtn" class="portal" data-target="cartPanel">üõí Cart</button>
      <button id="infoBtn" class="portal" data-target="infoPanel">‚ÑπÔ∏è Info</button>
      <button id="checkoutBtn" class="portal" data-target="checkoutPanel">üí≥ Checkout</button>
    </div>

    <!-- Upload below actions -->
    <div class="upload-section">
      <button id="uploadBtn" class="upload-btn">Upload your grocery list</button>
      <input type="file" id="fileUpload" accept=".txt,.jpg,.png,.pdf" hidden>
    </div>

    <div class="chat-section">
      <h2>Talk to your AI Walmart grocery associate</h2>
      <button id="pttBtn" class="halo-button" title="Click to talk"></button>
      <audio id="remote" autoplay playsinline></audio>

      <div id="answer" class="transcript" aria-live="polite"></div>

      <div class="classic-chat">
        <input id="userInput" placeholder="Type here to chat‚Ä¶" autocomplete="off" />
        <button id="sendBtn">Send</button>
      </div>

      <div class="controls">
        <button id="showConversation">Show Conversation</button>
        <button id="contactHuman">Contact a Human</button>
        <button id="stopBtn">Stop</button>
      </div>
    </div>

    <!-- Panels -->
    <section id="cartPanel" class="panel hidden" aria-label="Cart">
      <h3>Your Cart</h3><p>Your cart is empty.</p>
    </section>

    <section id="infoPanel" class="panel hidden" aria-label="Info">
      <h3>Information</h3>
      <p>This demo uses the standard VoxTalk layout for a consistent experience across brands.</p>
    </section>

    <section id="checkoutPanel" class="panel hidden" aria-label="Checkout">
      <h3>Checkout</h3><p>Checkout flow coming soon (UI only in this demo).</p>
    </section>

    <!-- Sharp-corner in-page contact panel -->
    <section id="contactPanel" class="contact-panel hidden" aria-label="Contact">
      <div class="contact-header">
        <span>Need a human?</span>
        <button id="contactClose" class="contact-close" title="Close">√ó</button>
      </div>
      <div class="contact-body">
        <p>Email: <a href="mailto:support@example.com">support@example.com</a></p>
        <p>Phone: <a href="tel:+18885551234">+1 (888) 555-1234</a></p>
      </div>
    </section>
  </main>

  <script>
    /* ---- Upload ---- */
    const uploadBtn = document.getElementById('uploadBtn');
    const fileInput = document.getElementById('fileUpload');
    uploadBtn.addEventListener('click', () => fileInput.click());

    /* ---- Classic chat ---- */
    const inputEl = document.getElementById("userInput");
    const sendBtn = document.getElementById("sendBtn");
    const answerEl = document.getElementById("answer");
    function append(role, text){
      const p = document.createElement('p');
      p.className = role;
      p.textContent = text;
      answerEl.appendChild(p);
      answerEl.scrollTop = answerEl.scrollHeight;
    }
    async function sendChat(){
      const text = inputEl.value.trim();
      if(!text) return;
      append("user", text); inputEl.value = "";
      try{
        const r = await fetch("/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text })
        });
        if(!r.ok) throw new Error("Chat endpoint error");
        const d = await r.json();
        append("assistant", d.reply || "(no reply)");
      }catch(e){
        append("error", "Text chat is unavailable right now.");
        console.error(e);
      }
    }
    sendBtn.addEventListener("click", sendChat);
    inputEl.addEventListener("keydown", e => { if(e.key==="Enter") sendChat(); });

    /* ---- Realtime voice (unchanged endpoints) ---- */
    const pttBtn = document.getElementById("pttBtn");
    const remoteEl = document.getElementById("remote");
    let pc=null, micStream=null;
    async function startSession(){
      try{
        const r = await fetch("/session");
        if(!r.ok) throw new Error("Session endpoint error");
        const data = await r.json();
        pc = new RTCPeerConnection();
        micStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        micStream.getTracks().forEach(t => pc.addTrack(t, micStream));
        pc.ontrack = e => remoteEl.srcObject = e.streams[0];
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        const sdpResponse = await fetch("https://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${data.client_secret.value}`,
            "Content-Type": "application/sdp"
          },
          body: offer.sdp
        });
        const answer = { type: "answer", sdp: await sdpResponse.text() };
        await pc.setRemoteDescription(answer);
      } catch(e){
        append("error", "Voice is unavailable right now.");
        console.error(e);
      }
    }
    pttBtn.addEventListener("click", startSession);

    /* ---- Panel switching (robust via data-target) ---- */
    const panelButtons = document.querySelectorAll(".portal");
    const allPanels = document.querySelectorAll(".panel");
    panelButtons.forEach(btn=>{
      btn.addEventListener("click", ()=>{
        const target = btn.getAttribute("data-target");
        allPanels.forEach(p => p.classList.add("hidden"));
        const panel = document.getElementById(target);
        if(panel) panel.classList.remove("hidden");
      });
    });

    /* ---- Show/Contact/Stop ---- */
    document.getElementById("showConversation").addEventListener("click", ()=> window.print());

    const contactPanel = document.getElementById("contactPanel");
    document.getElementById("contactHuman").addEventListener("click", ()=> contactPanel.classList.remove("hidden"));
    document.getElementById("contactClose").addEventListener("click", ()=> contactPanel.classList.add("hidden"));

    document.getElementById("stopBtn").addEventListener("click", ()=>{
      try{
        if (micStream) micStream.getTracks().forEach(t=>t.stop());
        if (remoteEl.srcObject) remoteEl.srcObject.getTracks().forEach(t=>t.stop());
        if (pc) pc.close();
      }catch(_){}
    });
  </script>
</body>
</html>
